<?php

namespace App\Http\Controllers;

use App\Models\Vulnerability;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Illuminate\Http\JsonResponse;

class VulnerabilityController extends Controller
{
    public function __construct() {}

    /**
     * @OA\Get(
     *     path="/api/v1/vulnerabilities",
     *     summary="Get list of vulnerabilities",
     *     tags={"Vulnerabilities"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="Page number for pagination",
     *         required=false,
     *         @OA\Schema(type="integer", default=1)
     *     ),
     *     @OA\Parameter(
     *         name="per_page",
     *         in="query",
     *         description="Number of items per page",
     *         required=false,
     *         @OA\Schema(type="integer", default=10)
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="List of vulnerabilities",
     *         @OA\JsonContent(ref="#/components/schemas/PaginatedVulnerabilityResponse")
     *     ),
     *     @OA\Response(
     *         response=401,
     *         description="Unauthenticated"
     *     )
     * )
     */
    public function index()
    {
        return Vulnerability::with(['owaspCategory', 'user'])->latest()->paginate(10);
    }

    /**
     * @OA\Post(
     *     path="/api/vulnerabilities",
     *     summary="Create a new vulnerability",
     *     tags={"Vulnerabilities"},
     *     security={{"bearerAuth": {}}},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(ref="#/components/schemas/VulnerabilityRequest")
     *     ),
     *     @OA\Response(
     *         response=201,
     *         description="Vulnerability created successfully",
     *         @OA\JsonContent(ref="#/components/schemas/Vulnerability")
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Validation error"
     *     )
     * )
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => ['required', Rule::in(['Critical', 'High', 'Medium', 'Low', 'Info'])],
            'status' => ['required', Rule::in(['Open', 'In Progress', 'Fixed', 'False Positive'])],
            'owasp_category_id' => 'required|exists:owasp_categories,id',
            'reported_by_name' => 'required|string|max:255',
            'reported_by_email' => 'required|email|max:255',
            'assigned_to_name' => 'nullable|string|max:255',
            'assigned_to_email' => 'nullable|email|max:255',
        ]);

        $vulnerability = Vulnerability::create([
            ...$validated,
            'user_id' => $request->user()->id,
        ]);

        return $vulnerability->load(['owaspCategory', 'user']);
    }

    /**
     * @OA\Get(
     *     path="/api/vulnerabilities/{id}",
     *     summary="Get vulnerability details",
     *     tags={"Vulnerabilities"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         description="Vulnerability ID",
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability details",
     *         @OA\JsonContent(ref="#/components/schemas/Vulnerability")
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Vulnerability not found"
     *     )
     * )
     */
    public function show(Vulnerability $vulnerability)
    {
        return $vulnerability->load(['owaspCategory', 'user']);
    }

    /**
     * @OA\Put(
     *     path="/api/vulnerabilities/{id}",
     *     summary="Update vulnerability",
     *     tags={"Vulnerabilities"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         description="Vulnerability ID",
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(ref="#/components/schemas/VulnerabilityRequest")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Vulnerability updated successfully",
     *         @OA\JsonContent(ref="#/components/schemas/Vulnerability")
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Unauthorized"
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Validation error"
     *     )
     * )
     */
    public function update(Request $request, Vulnerability $vulnerability)
    {
        if (!$vulnerability->isCreatedBy($request->user())) {
            return new JsonResponse(['message' => 'You are not authorized to update this vulnerability.'], 403);
        }

        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => ['required', Rule::in(['Critical', 'High', 'Medium', 'Low', 'Info'])],
            'status' => ['required', Rule::in(['Open', 'In Progress', 'Fixed', 'False Positive'])],
            'owasp_category_id' => 'required|exists:owasp_categories,id',
            'reported_by_name' => 'required|string|max:255',
            'reported_by_email' => 'required|email|max:255',
            'assigned_to_name' => 'nullable|string|max:255',
            'assigned_to_email' => 'nullable|email|max:255',
        ]);

        $vulnerability->update($validated);

        return $vulnerability->load(['owaspCategory', 'user']);
    }

    /**
     * @OA\Delete(
     *     path="/api/vulnerabilities/{id}",
     *     summary="Delete vulnerability",
     *     tags={"Vulnerabilities"},
     *     security={{"bearerAuth": {}}},
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         description="Vulnerability ID",
     *         @OA\Schema(type="integer")
     *     ),
     *     @OA\Response(
     *         response=204,
     *         description="Vulnerability deleted successfully"
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Unauthorized"
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Vulnerability not found"
     *     )
     * )
     */
    public function destroy(Request $request, Vulnerability $vulnerability)
    {
        if (!$vulnerability->isCreatedBy($request->user())) {
            return new JsonResponse(['message' => 'You are not authorized to delete this vulnerability.'], 403);
        }

        $vulnerability->delete();

        return response()->noContent();
    }
}
