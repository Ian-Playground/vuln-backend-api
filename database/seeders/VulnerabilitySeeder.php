<?php

namespace Database\Seeders;

use App\Models\Vulnerability;
use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class VulnerabilitySeeder extends Seeder
{
    public function run(): void
    {
        $vulnerabilities = [
            [
                'title' => 'SQL Injection in User Authentication Module',
                'description' => 'A critical SQL injection vulnerability was discovered in the user authentication module. The application fails to properly sanitize user input in the login form, allowing attackers to manipulate SQL queries and potentially gain unauthorized access to the database.',
                'severity' => 'Critical',
                'status' => 'Open',
                'reported_by_name' => 'John Smith',
                'reported_by_email' => 'john.smith@security.com',
                'assigned_to_name' => 'Sarah Johnson',
                'assigned_to_email' => 'sarah.johnson@company.com',
            ],
            [
                'title' => 'Cross-Site Scripting (XSS) in User Profile Page',
                'description' => 'A stored XSS vulnerability was identified in the user profile page. The application does not properly encode user input when displaying profile information, allowing attackers to inject malicious JavaScript code that executes in other users\' browsers.',
                'severity' => 'High',
                'status' => 'In Progress',
                'reported_by_name' => 'Emily Chen',
                'reported_by_email' => 'emily.chen@security.com',
                'assigned_to_name' => 'Michael Brown',
                'assigned_to_email' => 'michael.brown@company.com',
            ],
            [
                'title' => 'Insecure Direct Object Reference (IDOR) in API Endpoints',
                'description' => 'Multiple API endpoints are vulnerable to IDOR attacks. The application fails to implement proper access controls, allowing authenticated users to access or modify resources belonging to other users by manipulating object references.',
                'severity' => 'High',
                'status' => 'Fixed',
                'reported_by_name' => 'David Wilson',
                'reported_by_email' => 'david.wilson@security.com',
                'assigned_to_name' => 'Lisa Anderson',
                'assigned_to_email' => 'lisa.anderson@company.com',
            ],
            [
                'title' => 'Sensitive Data Exposure in API Responses',
                'description' => 'The API is exposing sensitive information in response headers and error messages. This includes internal server paths, database error details, and stack traces that could be leveraged by attackers to gather information about the application\'s infrastructure.',
                'severity' => 'Medium',
                'status' => 'Open',
                'reported_by_name' => 'Robert Taylor',
                'reported_by_email' => 'robert.taylor@security.com',
                'assigned_to_name' => 'James Wilson',
                'assigned_to_email' => 'james.wilson@company.com',
            ],
            [
                'title' => 'Missing Security Headers in Web Application',
                'description' => 'The web application is missing several important security headers, including Content-Security-Policy, X-Frame-Options, and X-Content-Type-Options. This could lead to various security issues such as clickjacking attacks and MIME type sniffing vulnerabilities.',
                'severity' => 'Medium',
                'status' => 'In Progress',
                'reported_by_name' => 'Maria Garcia',
                'reported_by_email' => 'maria.garcia@security.com',
                'assigned_to_name' => 'Thomas Lee',
                'assigned_to_email' => 'thomas.lee@company.com',
            ],
        ];

        // Get a random OWASP category ID for each vulnerability
        $owaspCategoryIds = DB::table('owasp_categories')->pluck('id')->toArray();

        // Get admin user ID
        $adminId = User::where('email', 'admin@example.com')->first()->id;

        foreach ($vulnerabilities as $vulnerability) {
            Vulnerability::create([
                ...$vulnerability,
                'owasp_category_id' => $owaspCategoryIds[array_rand($owaspCategoryIds)],
                'user_id' => $adminId, // Assign all vulnerabilities to admin
            ]);
        }
    }
}
